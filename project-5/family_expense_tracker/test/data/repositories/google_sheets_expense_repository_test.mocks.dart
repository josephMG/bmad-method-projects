// Mocks generated by Mockito 5.4.6 from annotations
// in family_expense_tracker/test/data/repositories/google_sheets_expense_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:family_expense_tracker/data/models/expense_record.dart' as _i5;
import 'package:family_expense_tracker/services/google_sheets_service.dart'
    as _i2;
import 'package:googleapis/sheets/v4.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [GoogleSheetsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSheetsService extends _i1.Mock
    implements _i2.GoogleSheetsService {
  MockGoogleSheetsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get spreadsheetId =>
      (super.noSuchMethod(
            Invocation.getter(#spreadsheetId),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#spreadsheetId),
            ),
          )
          as String);

  @override
  void clearCachedApi() => super.noSuchMethod(
    Invocation.method(#clearCachedApi, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<List<List<dynamic>>?> getSheet(String? sheetName) =>
      (super.noSuchMethod(
            Invocation.method(#getSheet, [sheetName]),
            returnValue: _i4.Future<List<List<dynamic>>?>.value(),
          )
          as _i4.Future<List<List<dynamic>>?>);

  @override
  _i4.Future<int?> findExpenseRowIndex(String? sheetName, String? recordID) =>
      (super.noSuchMethod(
            Invocation.method(#findExpenseRowIndex, [sheetName, recordID]),
            returnValue: _i4.Future<int?>.value(),
          )
          as _i4.Future<int?>);

  @override
  _i4.Future<void> updateExpense(
    String? sheetName,
    _i5.ExpenseRecord? expense,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [sheetName, expense]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteExpense(String? sheetName, String? recordID) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [sheetName, recordID]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> sheetExists(String? sheetName) =>
      (super.noSuchMethod(
            Invocation.method(#sheetExists, [sheetName]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<String>> getAllSheetNames() =>
      (super.noSuchMethod(
            Invocation.method(#getAllSheetNames, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<bool> isCategoryUsed(
    String? categoryId,
    List<String>? allSheetNames,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#isCategoryUsed, [categoryId, allSheetNames]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> updateExpensesCategory(
    String? oldCategoryId,
    String? newCategoryId,
    List<String>? allSheetNames,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpensesCategory, [
              oldCategoryId,
              newCategoryId,
              allSheetNames,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int?> getSheetId(String? sheetName) =>
      (super.noSuchMethod(
            Invocation.method(#getSheetId, [sheetName]),
            returnValue: _i4.Future<int?>.value(),
          )
          as _i4.Future<int?>);

  @override
  _i4.Future<void> batchUpdate(List<_i6.Request>? requests) =>
      (super.noSuchMethod(
            Invocation.method(#batchUpdate, [requests]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addExpense(
    String? sheetName,
    _i5.ExpenseRecord? testExpense,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [sheetName, testExpense]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createSheet(String? sheetName) =>
      (super.noSuchMethod(
            Invocation.method(#createSheet, [sheetName]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRow(int? sheetId, int? rowIndex) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRow, [sheetId, rowIndex]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateRow(
    String? sheetName,
    int? rowIndex,
    List<dynamic>? values,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateRow, [sheetName, rowIndex, values]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> appendSheet(
    String? sheetName,
    List<List<dynamic>>? values,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#appendSheet, [sheetName, values]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateSheet(String? range, List<List<dynamic>>? values) =>
      (super.noSuchMethod(
            Invocation.method(#updateSheet, [range, values]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
