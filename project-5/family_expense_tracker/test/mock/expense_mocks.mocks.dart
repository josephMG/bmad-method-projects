// Mocks generated by Mockito 5.4.6 from annotations
// in family_expense_tracker/test/mock/expense_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:family_expense_tracker/data/models/expense_record.dart' as _i4;
import 'package:family_expense_tracker/data/repositories/expense_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i2.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ExpenseRecord>> getExpensesForMonth(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getExpensesForMonth, [year, month]),
            returnValue: _i3.Future<List<_i4.ExpenseRecord>>.value(
              <_i4.ExpenseRecord>[],
            ),
          )
          as _i3.Future<List<_i4.ExpenseRecord>>);

  @override
  _i3.Future<void> addExpense(
    String? monthSheetName,
    _i4.ExpenseRecord? expense,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [monthSheetName, expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateExpense(
    String? monthSheetName,
    _i4.ExpenseRecord? expense,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [monthSheetName, expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteExpense(
    String? monthSheetName,
    String? recordID,
    String? currentUserEmail,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [
              monthSheetName,
              recordID,
              currentUserEmail,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
